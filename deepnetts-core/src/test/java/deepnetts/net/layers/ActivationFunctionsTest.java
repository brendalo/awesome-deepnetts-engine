
package deepnetts.net.layers;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Tests for activation functions.
 * 
 * @author Zoran Sevarac <zoran.sevarac@deepnetts.com>
 */
public class ActivationFunctionsTest {
       
    @Test
    public void testSigmoid() {                
        float[] x = {-7.0f,  -6.9f,  -6.8f,  -6.7f,  -6.6f,  -6.5f,  -6.4f,  -6.3f,  -6.2f,  -6.1f,  -6.0f,  -5.9f,  -5.8f,  -5.7f,  -5.6f,  -5.5f,  -5.4f,  -5.3f,  -5.2f,  -5.1f,  -5.0f,  -4.9f,  -4.8f,  -4.7f,  -4.6f,  -4.5f,  -4.4f,  -4.3f,  -4.2f,  -4.1f,  -4.0f,  -3.9f,  -3.8f,  -3.7f,  -3.6f,  -3.5f,  -3.4f,  -3.3f,  -3.2f,  -3.1f,  -3.0f,  -2.9f,  -2.8f,  -2.7f,  -2.6f,  -2.5f,  -2.4f,  -2.3f,  -2.2f,  -2.1f,  -2.0f,  -1.9f,  -1.8f,  -1.7f,  -1.6f,  -1.5f,  -1.4f,  -1.3f,  -1.2f,  -1.1f,  -1.0f,  -0.9f,  -0.8f,  -0.7f,  -0.6f,  -0.5f,  -0.4f,  -0.3f,  -0.2f,  -0.1f,  0f,  0.1f,  0.2f,  0.3f,  0.4f,  0.5f,  0.6f,  0.7f,  0.8f,  0.9f,  1.0f,  1.1f,  1.2f,  1.3f,  1.4f,  1.5f,  1.6f,  1.7f,  1.8f,  1.9f,  2.0f,  2.1f,  2.2f,  2.3f,  2.4f,  2.5f,  2.6f,  2.7f,  2.8f,  2.9f,  3.0f,  3.1f,  3.2f,  3.3f,  3.4f,  3.5f,  3.6f,  3.7f,  3.8f,  3.9f,  4.0f,  4.1f,  4.2f,  4.3f,  4.4f,  4.5f,  4.6f,  4.7f,  4.8f,  4.9f,  5.0f,  5.1f,  5.2f,  5.3f,  5.4f,  5.5f,  5.6f,  5.7f,  5.8f,  5.9f,  6.0f,  6.1f,  6.2f,  6.3f,  6.4f,  6.5f,  6.6f,  6.7f,  6.8f,  6.9f,  7.0f};
        float[] y = {0.000911051f,  0.00100677f,  0.00111254f,  0.0012294f,  0.00135852f,  0.00150118f,  0.0016588f,  0.00183294f,  0.00202532f,  0.00223785f,  0.00247262f,  0.00273196f,  0.00301841f,  0.0033348f,  0.00368424f,  0.00407013f,  0.00449627f,  0.00496679f,  0.00548629f,  0.00605979f,  0.00669284f,  0.00739153f,  0.00816255f,  0.00901328f,  0.00995178f,  0.0109869f,  0.0121284f,  0.0133869f,  0.014774f,  0.0163025f,  0.0179862f,  0.0198402f,  0.0218812f,  0.0241269f,  0.0265969f,  0.0293121f,  0.0322954f,  0.0355711f,  0.0391656f,  0.0431071f,  0.0474257f,  0.0521534f,  0.057324f,  0.0629731f,  0.0691381f,  0.0758579f,  0.0831724f,  0.0911226f,  0.0997501f,  0.109096f,  0.119202f,  0.130108f,  0.14185f,  0.154465f,  0.167981f,  0.182425f,  0.197815f,  0.214164f,  0.231474f,  0.249739f,  0.26894f,  0.289049f,  0.310024f,  0.331811f,  0.354342f,  0.377539f,  0.401311f,  0.425556f,  0.450164f,  0.475019f,  0.499998f,  0.524978f,  0.549832f,  0.574441f,  0.598686f,  0.622458f,  0.645655f,  0.668186f,  0.689973f,  0.710948f,  0.731057f,  0.750259f,  0.768523f,  0.785834f,  0.802183f,  0.817573f,  0.832017f,  0.845534f,  0.858148f,  0.869891f,  0.880796f,  0.890902f,  0.900249f,  0.908876f,  0.916827f,  0.924141f,  0.930861f,  0.937026f,  0.942675f,  0.947846f,  0.952574f,  0.956892f,  0.960834f,  0.964428f,  0.967704f,  0.970688f,  0.973403f,  0.975873f,  0.978118f,  0.98016f,  0.982014f,  0.983697f,  0.985226f,  0.986613f,  0.987871f,  0.989013f,  0.990048f,  0.990987f,  0.991837f,  0.992608f,  0.993307f,  0.99394f,  0.994514f,  0.995033f,  0.995504f,  0.99593f,  0.996316f,  0.996665f,  0.996982f,  0.997268f,  0.997527f,  0.997762f,  0.997975f,  0.998167f,  0.998341f,  0.998499f,  0.998641f,  0.998771f,  0.998887f,  0.998993f,  0.999089f};
                 
        for (int i = 0; i < x.length; i++) {
            float expResult = y[i];
            float result = ActivationFunctions.sigmoid(x[i]);
            assertEquals(expResult, result, 1e-5);
        }  
    }

    @Test
    public void testSigmoidPrime() {
        float[] x = {0.000911051f,  0.00100677f,  0.00111254f,  0.0012294f,  0.00135852f,  0.00150118f,  0.0016588f,  0.00183294f,  0.00202532f,  0.00223785f,  0.00247262f,  0.00273196f,  0.00301841f,  0.0033348f,  0.00368424f,  0.00407013f,  0.00449627f,  0.00496679f,  0.00548629f,  0.00605979f,  0.00669284f,  0.00739153f,  0.00816255f,  0.00901328f,  0.00995178f,  0.0109869f,  0.0121284f,  0.0133869f,  0.014774f,  0.0163025f,  0.0179862f,  0.0198402f,  0.0218812f,  0.0241269f,  0.0265969f,  0.0293121f,  0.0322954f,  0.0355711f,  0.0391656f,  0.0431071f,  0.0474257f,  0.0521534f,  0.057324f,  0.0629731f,  0.0691381f,  0.0758579f,  0.0831724f,  0.0911226f,  0.0997501f,  0.109096f,  0.119202f,  0.130108f,  0.14185f,  0.154465f,  0.167981f,  0.182425f,  0.197815f,  0.214164f,  0.231474f,  0.249739f,  0.26894f,  0.289049f,  0.310024f,  0.331811f,  0.354342f,  0.377539f,  0.401311f,  0.425556f,  0.450164f,  0.475019f,  0.499998f,  0.524978f,  0.549832f,  0.574441f,  0.598686f,  0.622458f,  0.645655f,  0.668186f,  0.689973f,  0.710948f,  0.731057f,  0.750259f,  0.768523f,  0.785834f,  0.802183f,  0.817573f,  0.832017f,  0.845534f,  0.858148f,  0.869891f,  0.880796f,  0.890902f,  0.900249f,  0.908876f,  0.916827f,  0.924141f,  0.930861f,  0.937026f,  0.942675f,  0.947846f,  0.952574f,  0.956892f,  0.960834f,  0.964428f,  0.967704f,  0.970688f,  0.973403f,  0.975873f,  0.978118f,  0.98016f,  0.982014f,  0.983697f,  0.985226f,  0.986613f,  0.987871f,  0.989013f,  0.990048f,  0.990987f,  0.991837f,  0.992608f,  0.993307f,  0.99394f,  0.994514f,  0.995033f,  0.995504f,  0.99593f,  0.996316f,  0.996665f,  0.996982f,  0.997268f,  0.997527f,  0.997762f,  0.997975f,  0.998167f,  0.998341f,  0.998499f,  0.998641f,  0.998771f,  0.998887f,  0.998993f,  0.999089f};
        float[] y = {0.000910221f,  0.00100576f,  0.0011113f,  0.00122789f,  0.00135667f,  0.00149893f,  0.00165605f,  0.00182958f,  0.00202122f,  0.00223284f,  0.00246651f,  0.00272449f,  0.0030093f,  0.00332368f,  0.00367066f,  0.00405357f,  0.00447605f,  0.00494212f,  0.00545619f,  0.00602307f,  0.00664804f,  0.00733689f,  0.00809593f,  0.00893204f,  0.00985274f,  0.0108662f,  0.0119813f,  0.0132077f,  0.0145557f,  0.0160367f,  0.0176627f,  0.0194466f,  0.0214024f,  0.0235448f,  0.0258895f,  0.0284529f,  0.0312524f,  0.0343058f,  0.0376316f,  0.0412489f,  0.0451765f,  0.0494334f,  0.0540379f,  0.0590075f,  0.0643581f,  0.0701035f,  0.0762547f,  0.0828193f,  0.0898f,  0.0971944f,  0.104993f,  0.11318f,  0.121729f,  0.130605f,  0.139763f,  0.149146f,  0.158684f,  0.168298f,  0.177894f,  0.187369f,  0.196611f,  0.2055f,  0.213909f,  0.221712f,  0.228784f,  0.235003f,  0.24026f,  0.244458f,  0.247516f,  0.249376f,  0.25f,  0.249376f,  0.247517f,  0.244459f,  0.240261f,  0.235004f,  0.228785f,  0.221713f,  0.21391f,  0.205501f,  0.196613f,  0.187371f,  0.177895f,  0.168299f,  0.158686f,  0.149147f,  0.139765f,  0.130607f,  0.12173f,  0.113181f,  0.104994f,  0.0971954f,  0.089801f,  0.0828201f,  0.0762556f,  0.0701043f,  0.0643588f,  0.0590082f,  0.0540386f,  0.049434f,  0.045177f,  0.0412494f,  0.0376321f,  0.0343062f,  0.0312528f,  0.0284533f,  0.0258898f,  0.0235451f,  0.0214027f,  0.0194469f,  0.0176629f,  0.0160369f,  0.0145559f,  0.0132078f,  0.0119815f,  0.0108664f,  0.00985287f,  0.00893215f,  0.00809603f,  0.00733699f,  0.00664813f,  0.00602315f,  0.00545626f,  0.00494219f,  0.00447611f,  0.00405362f,  0.00367071f,  0.00332373f,  0.00300934f,  0.00272453f,  0.00246654f,  0.00223287f,  0.00202124f,  0.0018296f,  0.00165607f,  0.00149895f,  0.00135669f,  0.0012279f,  0.00111131f,  0.00100577f,  0.000910233f};

        for (int i = 0; i < x.length; i++) {
            float expResult = y[i];
            float result = ActivationFunctions.sigmoidPrime(x[i]);
            assertEquals(expResult, result, 1e-6);
        }    
    }

    /**
     * Test of tanh method, of class ActivationFunctions.
     */
    @Test
    public void testTanh() {
        float[] x = {-7.0f,  -6.9f,  -6.8f,  -6.7f,  -6.6f,  -6.5f,  -6.4f,  -6.3f,  -6.2f,  -6.1f,  -6.0f,  -5.9f,  -5.8f,  -5.7f,  -5.6f,  -5.5f,  -5.4f,  -5.3f,  -5.2f,  -5.1f,  -5.0f,  -4.9f,  -4.8f,  -4.7f,  -4.6f,  -4.5f,  -4.4f,  -4.3f,  -4.2f,  -4.1f,  -4.0f,  -3.9f,  -3.8f,  -3.7f,  -3.6f,  -3.5f,  -3.4f,  -3.3f,  -3.2f,  -3.1f,  -3.0f,  -2.9f,  -2.8f,  -2.7f,  -2.6f,  -2.5f,  -2.4f,  -2.3f,  -2.2f,  -2.1f,  -2.0f,  -1.9f,  -1.8f,  -1.7f,  -1.6f,  -1.5f,  -1.4f,  -1.3f,  -1.2f,  -1.1f,  -1.0f,  -0.9f,  -0.8f,  -0.7f,  -0.6f,  -0.5f,  -0.4f,  -0.3f,  -0.2f,  -0.1f,  0f,  0.1f,  0.2f,  0.3f,  0.4f,  0.5f,  0.6f,  0.7f,  0.8f,  0.9f,  1.0f,  1.1f,  1.2f,  1.3f,  1.4f,  1.5f,  1.6f,  1.7f,  1.8f,  1.9f,  2.0f,  2.1f,  2.2f,  2.3f,  2.4f,  2.5f,  2.6f,  2.7f,  2.8f,  2.9f,  3.0f,  3.1f,  3.2f,  3.3f,  3.4f,  3.5f,  3.6f,  3.7f,  3.8f,  3.9f,  4.0f,  4.1f,  4.2f,  4.3f,  4.4f,  4.5f,  4.6f,  4.7f,  4.8f,  4.9f,  5.0f,  5.1f,  5.2f,  5.3f,  5.4f,  5.5f,  5.6f,  5.7f,  5.8f,  5.9f,  6.0f,  6.1f,  6.2f,  6.3f,  6.4f,  6.5f,  6.6f,  6.7f,  6.8f,  6.9f,  7.0f};
        float[] y = {-0.999998f,  -0.999998f,  -0.999997f,  -0.999997f,  -0.999996f,  -0.999995f,  -0.999994f,  -0.999993f,  -0.999992f,  -0.99999f,  -0.999988f,  -0.999985f,  -0.999982f,  -0.999978f,  -0.999973f,  -0.999967f,  -0.999959f,  -0.99995f,  -0.999939f,  -0.999926f,  -0.999909f,  -0.999889f,  -0.999865f,  -0.999835f,  -0.999798f,  -0.999753f,  -0.999699f,  -0.999632f,  -0.99955f,  -0.999451f,  -0.999329f,  -0.999181f,  -0.999f,  -0.998778f,  -0.998508f,  -0.998178f,  -0.997775f,  -0.997283f,  -0.996682f,  -0.995949f,  -0.995055f,  -0.993963f,  -0.992631f,  -0.991007f,  -0.989027f,  -0.986614f,  -0.983675f,  -0.980096f,  -0.975743f,  -0.970452f,  -0.964028f,  -0.956237f,  -0.946806f,  -0.935409f,  -0.921669f,  -0.905148f,  -0.885352f,  -0.861723f,  -0.833655f,  -0.800499f,  -0.761594f,  -0.716298f,  -0.664037f,  -0.604368f,  -0.53705f,  -0.462117f,  -0.379949f,  -0.291313f,  -0.197375f,  -0.099668f,  -2.4869e-14f,  0.099668f,  0.197375f,  0.291313f,  0.379949f,  0.462117f,  0.53705f,  0.604368f,  0.664037f,  0.716298f,  0.761594f,  0.800499f,  0.833655f,  0.861723f,  0.885352f,  0.905148f,  0.921669f,  0.935409f,  0.946806f,  0.956237f,  0.964028f,  0.970452f,  0.975743f,  0.980096f,  0.983675f,  0.986614f,  0.989027f,  0.991007f,  0.992631f,  0.993963f,  0.995055f,  0.995949f,  0.996682f,  0.997283f,  0.997775f,  0.998178f,  0.998508f,  0.998778f,  0.999f,  0.999181f,  0.999329f,  0.999451f,  0.99955f,  0.999632f,  0.999699f,  0.999753f,  0.999798f,  0.999835f,  0.999865f,  0.999889f,  0.999909f,  0.999926f,  0.999939f,  0.99995f,  0.999959f,  0.999967f,  0.999973f,  0.999978f,  0.999982f,  0.999985f,  0.999988f,  0.99999f,  0.999992f,  0.999993f,  0.999994f,  0.999995f,  0.999996f,  0.999997f,  0.999997f,  0.999998f,  0.999998f};
                
        for (int i = 0; i < x.length; i++) {
            float expResult = y[i];
            float result = ActivationFunctions.tanh(x[i]);
            assertEquals(expResult, result, 1e-6);
        }    
    }

    @Test
    public void testTanhPrime() {
        float[] x = {-0.999998f,  -0.999998f,  -0.999997f,  -0.999997f,  -0.999996f,  -0.999995f,  -0.999994f,  -0.999993f,  -0.999992f,  -0.99999f,  -0.999988f,  -0.999985f,  -0.999982f,  -0.999978f,  -0.999973f,  -0.999967f,  -0.999959f,  -0.99995f,  -0.999939f,  -0.999926f,  -0.999909f,  -0.999889f,  -0.999865f,  -0.999835f,  -0.999798f,  -0.999753f,  -0.999699f,  -0.999632f,  -0.99955f,  -0.999451f,  -0.999329f,  -0.999181f,  -0.999f,  -0.998778f,  -0.998508f,  -0.998178f,  -0.997775f,  -0.997283f,  -0.996682f,  -0.995949f,  -0.995055f,  -0.993963f,  -0.992631f,  -0.991007f,  -0.989027f,  -0.986614f,  -0.983675f,  -0.980096f,  -0.975743f,  -0.970452f,  -0.964028f,  -0.956237f,  -0.946806f,  -0.935409f,  -0.921669f,  -0.905148f,  -0.885352f,  -0.861723f,  -0.833655f,  -0.800499f,  -0.761594f,  -0.716298f,  -0.664037f,  -0.604368f,  -0.53705f,  -0.462117f,  -0.379949f,  -0.291313f,  -0.197375f,  -0.099668f,  -2.4869e-14f,  0.099668f,  0.197375f,  0.291313f,  0.379949f,  0.462117f,  0.53705f,  0.604368f,  0.664037f,  0.716298f,  0.761594f,  0.800499f,  0.833655f,  0.861723f,  0.885352f,  0.905148f,  0.921669f,  0.935409f,  0.946806f,  0.956237f,  0.964028f,  0.970452f,  0.975743f,  0.980096f,  0.983675f,  0.986614f,  0.989027f,  0.991007f,  0.992631f,  0.993963f,  0.995055f,  0.995949f,  0.996682f,  0.997283f,  0.997775f,  0.998178f,  0.998508f,  0.998778f,  0.999f,  0.999181f,  0.999329f,  0.999451f,  0.99955f,  0.999632f,  0.999699f,  0.999753f,  0.999798f,  0.999835f,  0.999865f,  0.999889f,  0.999909f,  0.999926f,  0.999939f,  0.99995f,  0.999959f,  0.999967f,  0.999973f,  0.999978f,  0.999982f,  0.999985f,  0.999988f,  0.99999f,  0.999992f,  0.999993f,  0.999994f,  0.999995f,  0.999996f,  0.999997f,  0.999997f,  0.999998f,  0.999998f};
        float[] y = {3.32611e-06f,  4.06252e-06f,  4.96197e-06f,  6.06056e-06f,  7.40238e-06f,  9.04128e-06f,  1.1043e-05f,  1.3488e-05f,  1.64742e-05f,  2.01216e-05f,  2.45765e-05f,  3.00178e-05f,  3.66637e-05f,  4.47809e-05f,  5.46953e-05f,  6.68046e-05f,  8.15947e-05f,  9.96591e-05f,  0.000121723f,  0.00014867f,  0.000181583f,  0.000221782f,  0.000270878f,  0.000330842f,  0.000404076f,  0.000493517f,  0.000602751f,  0.000736152f,  0.000899065f,  0.00109801f,  0.00134095f,  0.0016376f,  0.0019998f,  0.00244202f,  0.00298189f,  0.00364088f,  0.00444519f,  0.0054267f,  0.0066242f,  0.00808487f,  0.00986604f,  0.0120372f,  0.0146827f,  0.0179042f,  0.0218248f,  0.0265922f,  0.0323838f,  0.0394111f,  0.0479253f,  0.058223f,  0.0706508f,  0.0856099f,  0.103558f,  0.12501f,  0.150527f,  0.180707f,  0.216152f,  0.257433f,  0.30502f,  0.359201f,  0.419974f,  0.486917f,  0.559055f,  0.63474f,  0.711578f,  0.786448f,  0.855639f,  0.915137f,  0.961043f,  0.990066f,  1.0f,  0.990066f,  0.961043f,  0.915137f,  0.855639f,  0.786448f,  0.711578f,  0.63474f,  0.559055f,  0.486917f,  0.419974f,  0.359201f,  0.30502f,  0.257433f,  0.216152f,  0.180707f,  0.150527f,  0.12501f,  0.103558f,  0.0856099f,  0.0706508f,  0.058223f,  0.0479253f,  0.0394111f,  0.0323838f,  0.0265922f,  0.0218248f,  0.0179042f,  0.0146827f,  0.0120372f,  0.00986604f,  0.00808487f,  0.0066242f,  0.0054267f,  0.00444519f,  0.00364088f,  0.00298189f,  0.00244202f,  0.0019998f,  0.0016376f,  0.00134095f,  0.00109801f,  0.000899065f,  0.000736152f,  0.000602751f,  0.000493517f,  0.000404076f,  0.000330842f,  0.000270878f,  0.000221782f,  0.000181583f,  0.00014867f,  0.000121723f,  9.96591e-05f,  8.15947e-05f,  6.68046e-05f,  5.46953e-05f,  4.47809e-05f,  3.66637e-05f,  3.00178e-05f,  2.45765e-05f,  2.01216e-05f,  1.64742e-05f,  1.3488e-05f,  1.1043e-05f,  9.04128e-06f,  7.40238e-06f,  6.06056e-06f,  4.96197e-06f,  4.06252e-06f,  3.32611e-06f};
               
        for (int i = 0; i < x.length; i++) {
            float expResult = y[i];
            float result = ActivationFunctions.tanhPrime(x[i]);
            assertEquals(expResult, result, 1e-6);
        }  
    }
    
    @Test
    public void testRelu() {
        float[] x = {-7.0f,  -6.9f,  -6.8f,  -6.7f,  -6.6f,  -6.5f,  -6.4f,  -6.3f,  -6.2f,  -6.1f,  -6.0f,  -5.9f,  -5.8f,  -5.7f,  -5.6f,  -5.5f,  -5.4f,  -5.3f,  -5.2f,  -5.1f,  -5.0f,  -4.9f,  -4.8f,  -4.7f,  -4.6f,  -4.5f,  -4.4f,  -4.3f,  -4.2f,  -4.1f,  -4.0f,  -3.9f,  -3.8f,  -3.7f,  -3.6f,  -3.5f,  -3.4f,  -3.3f,  -3.2f,  -3.1f,  -3.0f,  -2.9f,  -2.8f,  -2.7f,  -2.6f,  -2.5f,  -2.4f,  -2.3f,  -2.2f,  -2.1f,  -2.0f,  -1.9f,  -1.8f,  -1.7f,  -1.6f,  -1.5f,  -1.4f,  -1.3f,  -1.2f,  -1.1f,  -1.0f,  -0.9f,  -0.8f,  -0.7f,  -0.6f,  -0.5f,  -0.4f,  -0.3f,  -0.2f,  -0.1f,  0f,  0.1f,  0.2f,  0.3f,  0.4f,  0.5f,  0.6f,  0.7f,  0.8f,  0.9f,  1.0f,  1.1f,  1.2f,  1.3f,  1.4f,  1.5f,  1.6f,  1.7f,  1.8f,  1.9f,  2.0f,  2.1f,  2.2f,  2.3f,  2.4f,  2.5f,  2.6f,  2.7f,  2.8f,  2.9f,  3.0f,  3.1f,  3.2f,  3.3f,  3.4f,  3.5f,  3.6f,  3.7f,  3.8f,  3.9f,  4.0f,  4.1f,  4.2f,  4.3f,  4.4f,  4.5f,  4.6f,  4.7f,  4.8f,  4.9f,  5.0f,  5.1f,  5.2f,  5.3f,  5.4f,  5.5f,  5.6f,  5.7f,  5.8f,  5.9f,  6.0f,  6.1f,  6.2f,  6.3f,  6.4f,  6.5f,  6.6f,  6.7f,  6.8f,  6.9f,  7.0f};
        float[] y = {0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f, 0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f,  0f, 0f,  0.1f,  0.2f,  0.3f,  0.4f,  0.5f,  0.6f,  0.7f,  0.8f,  0.9f,  1.0f,  1.1f,  1.2f,  1.3f,  1.4f,  1.5f,  1.6f, 1.7f,  1.8f,  1.9f,  2.0f,  2.1f,  2.2f,  2.3f,  2.4f,  2.5f,  2.6f,  2.7f,  2.8f,  2.9f,  3.0f,  3.1f,  3.2f,  3.3f,  3.4f,  3.5f,  3.6f,  3.7f,  3.8f,  3.9f,  4.0f,  4.1f,  4.2f,  4.3f,  4.4f,  4.5f,  4.6f,  4.7f,  4.8f, 4.9f,  5.0f,  5.1f,  5.2f,  5.3f,  5.4f,  5.5f,  5.6f,  5.7f,  5.8f,  5.9f,  6.0f, 6.1f,  6.2f,  6.3f,  6.4f,  6.5f,  6.6f,  6.7f, 6.8f, 6.9f, 7.0f};
               
        for (int i = 0; i < x.length; i++) {
            float expResult = y[i];
            float result = ActivationFunctions.relu(x[i]);
            assertEquals(expResult, result, 0);
        } 
    }
    
    @Test
    public void testReluPrime() {
        float[] x = {-7.0f,  -6.9f,  -6.8f,  -6.7f,  -6.6f,  -6.5f,  -6.4f,  -6.3f,  -6.2f,  -6.1f,  -6.0f,  -5.9f,  -5.8f,  -5.7f,  -5.6f,  -5.5f,  -5.4f,  -5.3f,  -5.2f,  -5.1f,  -5.0f,  -4.9f,  -4.8f,  -4.7f,  -4.6f,  -4.5f,  -4.4f,  -4.3f,  -4.2f,  -4.1f,  -4.0f,  -3.9f,  -3.8f,  -3.7f,  -3.6f,  -3.5f,  -3.4f,  -3.3f,  -3.2f,  -3.1f,  -3.0f,  -2.9f,  -2.8f,  -2.7f,  -2.6f,  -2.5f,  -2.4f,  -2.3f,  -2.2f,  -2.1f,  -2.0f,  -1.9f,  -1.8f,  -1.7f,  -1.6f,  -1.5f,  -1.4f,  -1.3f,  -1.2f,  -1.1f,  -1.0f,  -0.9f,  -0.8f,  -0.7f,  -0.6f,  -0.5f,  -0.4f,  -0.3f,  -0.2f,  -0.1f,  0f,  0.1f,  0.2f,  0.3f,  0.4f,  0.5f,  0.6f,  0.7f,  0.8f,  0.9f,  1.0f,  1.1f,  1.2f,  1.3f,  1.4f,  1.5f,  1.6f,  1.7f,  1.8f,  1.9f,  2.0f,  2.1f,  2.2f,  2.3f,  2.4f,  2.5f,  2.6f,  2.7f,  2.8f,  2.9f,  3.0f,  3.1f,  3.2f,  3.3f,  3.4f,  3.5f,  3.6f,  3.7f,  3.8f,  3.9f,  4.0f,  4.1f,  4.2f,  4.3f,  4.4f,  4.5f,  4.6f,  4.7f,  4.8f,  4.9f,  5.0f,  5.1f,  5.2f,  5.3f,  5.4f,  5.5f,  5.6f,  5.7f,  5.8f,  5.9f,  6.0f,  6.1f,  6.2f,  6.3f,  6.4f,  6.5f,  6.6f,  6.7f,  6.8f,  6.9f,  7.0f};
        float[] y = {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 };
        
        for (int i = 0; i < x.length; i++) {
            float expResult = y[i];
            float result = ActivationFunctions.reluPrime(x[i]);
            assertEquals(expResult, result, 0);
        } 
    }
    
    @Test
    public void testLinear() {
        float[] x = {-7.0f,  -6.9f,  -6.8f,  -6.7f,  -6.6f,  -6.5f,  -6.4f,  -6.3f,  -6.2f,  -6.1f,  -6.0f,  -5.9f,  -5.8f,  -5.7f,  -5.6f,  -5.5f,  -5.4f,  -5.3f,  -5.2f,  -5.1f,  -5.0f,  -4.9f,  -4.8f,  -4.7f,  -4.6f,  -4.5f,  -4.4f,  -4.3f,  -4.2f,  -4.1f,  -4.0f,  -3.9f,  -3.8f,  -3.7f,  -3.6f,  -3.5f,  -3.4f,  -3.3f,  -3.2f,  -3.1f,  -3.0f,  -2.9f,  -2.8f,  -2.7f,  -2.6f,  -2.5f,  -2.4f,  -2.3f,  -2.2f,  -2.1f,  -2.0f,  -1.9f,  -1.8f,  -1.7f,  -1.6f,  -1.5f,  -1.4f,  -1.3f,  -1.2f,  -1.1f,  -1.0f,  -0.9f,  -0.8f,  -0.7f,  -0.6f,  -0.5f,  -0.4f,  -0.3f,  -0.2f,  -0.1f,  0f,  0.1f,  0.2f,  0.3f,  0.4f,  0.5f,  0.6f,  0.7f,  0.8f,  0.9f,  1.0f,  1.1f,  1.2f,  1.3f,  1.4f,  1.5f,  1.6f,  1.7f,  1.8f,  1.9f,  2.0f,  2.1f,  2.2f,  2.3f,  2.4f,  2.5f,  2.6f,  2.7f,  2.8f,  2.9f,  3.0f,  3.1f,  3.2f,  3.3f,  3.4f,  3.5f,  3.6f,  3.7f,  3.8f,  3.9f,  4.0f,  4.1f,  4.2f,  4.3f,  4.4f,  4.5f,  4.6f,  4.7f,  4.8f,  4.9f,  5.0f,  5.1f,  5.2f,  5.3f,  5.4f,  5.5f,  5.6f,  5.7f,  5.8f,  5.9f,  6.0f,  6.1f,  6.2f,  6.3f,  6.4f,  6.5f,  6.6f,  6.7f,  6.8f,  6.9f,  7.0f};
        float[] y = {-7.0f,  -6.9f,  -6.8f,  -6.7f,  -6.6f,  -6.5f,  -6.4f,  -6.3f,  -6.2f,  -6.1f,  -6.0f,  -5.9f,  -5.8f,  -5.7f,  -5.6f,  -5.5f,  -5.4f,  -5.3f,  -5.2f,  -5.1f,  -5.0f,  -4.9f,  -4.8f,  -4.7f,  -4.6f,  -4.5f,  -4.4f,  -4.3f,  -4.2f,  -4.1f,  -4.0f,  -3.9f,  -3.8f,  -3.7f,  -3.6f,  -3.5f,  -3.4f,  -3.3f,  -3.2f,  -3.1f,  -3.0f,  -2.9f,  -2.8f,  -2.7f,  -2.6f,  -2.5f,  -2.4f,  -2.3f,  -2.2f,  -2.1f,  -2.0f,  -1.9f,  -1.8f,  -1.7f,  -1.6f,  -1.5f,  -1.4f,  -1.3f,  -1.2f,  -1.1f,  -1.0f,  -0.9f,  -0.8f,  -0.7f,  -0.6f,  -0.5f,  -0.4f,  -0.3f,  -0.2f,  -0.1f,  0f,  0.1f,  0.2f,  0.3f,  0.4f,  0.5f,  0.6f,  0.7f,  0.8f,  0.9f,  1.0f,  1.1f,  1.2f,  1.3f,  1.4f,  1.5f,  1.6f,  1.7f,  1.8f,  1.9f,  2.0f,  2.1f,  2.2f,  2.3f,  2.4f,  2.5f,  2.6f,  2.7f,  2.8f,  2.9f,  3.0f,  3.1f,  3.2f,  3.3f,  3.4f,  3.5f,  3.6f,  3.7f,  3.8f,  3.9f,  4.0f,  4.1f,  4.2f,  4.3f,  4.4f,  4.5f,  4.6f,  4.7f,  4.8f,  4.9f,  5.0f,  5.1f,  5.2f,  5.3f,  5.4f,  5.5f,  5.6f,  5.7f,  5.8f,  5.9f,  6.0f,  6.1f,  6.2f,  6.3f,  6.4f,  6.5f,  6.6f,  6.7f,  6.8f,  6.9f,  7.0f};
               
        for (int i = 0; i < x.length; i++) {
            float expResult = y[i];
            float result = ActivationFunctions.linear(x[i]);
            assertEquals(expResult, result, 0);
        } 
    }


    @Test
    public void testLinearPrime() {       
        float[] x = {-7.0f,  -6.9f,  -6.8f,  -6.7f,  -6.6f,  -6.5f,  -6.4f,  -6.3f,  -6.2f,  -6.1f,  -6.0f,  -5.9f,  -5.8f,  -5.7f,  -5.6f,  -5.5f,  -5.4f,  -5.3f,  -5.2f,  -5.1f,  -5.0f,  -4.9f,  -4.8f,  -4.7f,  -4.6f,  -4.5f,  -4.4f,  -4.3f,  -4.2f,  -4.1f,  -4.0f,  -3.9f,  -3.8f,  -3.7f,  -3.6f,  -3.5f,  -3.4f,  -3.3f,  -3.2f,  -3.1f,  -3.0f,  -2.9f,  -2.8f,  -2.7f,  -2.6f,  -2.5f,  -2.4f,  -2.3f,  -2.2f,  -2.1f,  -2.0f,  -1.9f,  -1.8f,  -1.7f,  -1.6f,  -1.5f,  -1.4f,  -1.3f,  -1.2f,  -1.1f,  -1.0f,  -0.9f,  -0.8f,  -0.7f,  -0.6f,  -0.5f,  -0.4f,  -0.3f,  -0.2f,  -0.1f,  0f,  0.1f,  0.2f,  0.3f,  0.4f,  0.5f,  0.6f,  0.7f,  0.8f,  0.9f,  1.0f,  1.1f,  1.2f,  1.3f,  1.4f,  1.5f,  1.6f,  1.7f,  1.8f,  1.9f,  2.0f,  2.1f,  2.2f,  2.3f,  2.4f,  2.5f,  2.6f,  2.7f,  2.8f,  2.9f,  3.0f,  3.1f,  3.2f,  3.3f,  3.4f,  3.5f,  3.6f,  3.7f,  3.8f,  3.9f,  4.0f,  4.1f,  4.2f,  4.3f,  4.4f,  4.5f,  4.6f,  4.7f,  4.8f,  4.9f,  5.0f,  5.1f,  5.2f,  5.3f,  5.4f,  5.5f,  5.6f,  5.7f,  5.8f,  5.9f,  6.0f,  6.1f,  6.2f,  6.3f,  6.4f,  6.5f,  6.6f,  6.7f,  6.8f,  6.9f,  7.0f};
                
        for (int i = 0; i < x.length; i++) {
            float expResult = 1;
            float result = ActivationFunctions.linearPrime(x[i]);
            assertEquals(expResult, result, 1e-8);
        } 
    }    
    
}